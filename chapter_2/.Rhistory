college[Grad.Rate>100]
college[Grad.Rate>100]
# 8 (a) We import the data and set stringAsFactors = TRUE. The advantage of doing this is that statistical methods work better. Compare summary(college) in both cases.
college = read.csv("College.csv", stringsAsFactors = TRUE)
# 8 (b)
# The default way of calling a dataframe's column is dull so we simplify that task by using attach():
attach(college)
# rownames(college) gives college's rows a name for them. We choose the college name to be their names
rownames(college) = college[, 1]
# We delete colleges name as we don't want to threat them as data.
college = college[, -1]
View(college)
# 8 (c) i.
summary(college)     # We can see here that some data are wrong: PhD Max = 103%, Grad.Rate = 118%. We are going to find
# ii.
pairs(college[1:10]) # Doesn't help too much
# iii.
plot(Private, Outstate)
# iv
Elite = rep("No", nrow(college))      # Creates a "column vector" with char = "No" for each vector element.
Elite[Top10perc > 50] = "Yes"         # Now the rows associated to Top10perc > 50 change from a "No" class to a "Yes" class.
# These universities belong to a group that we call as Elite.
Elite = as.factor(Elite)
summary(Elite)                        # No = 699, Yes = 78
plot(Elite, Outstate)                 # "Yes" have a highly negative skewed distribution
# vi
# Define ratio_accept: measures how difficult is to be accepted in a determined college.
ratio_accept = Accept/Apps
plot(ratio_accept, Top10perc)    # There is an inverse relationship between these variables. The more the top students apply
# the more difficult to be accepted.
plot(Top10perc, Grad.Rate)
college[Grad.Rate>100]
# the more difficult to be accepted.
plot(Top10perc, Grad.Rate)
# 8 (a) We import the data and set stringAsFactors = TRUE. The advantage of doing this is that statistical methods work better. Compare summary(college) in both cases.
college = read.csv("College.csv", stringsAsFactors = TRUE)
# 8 (b)
# The default way of calling a dataframe's column is dull so we simplify that task by using attach():
attach(college)
# rownames(college) gives college's rows a name for them. We choose the college name to be their names
rownames(college) = college[, 1]
# We delete colleges name as we don't want to threat them as data.
college = college[, -1]
View(college)
View(college)
# 8 (c) i.
summary(college)     # We can see here that some data are wrong: PhD Max = 103%, Grad.Rate = 118%. We are going to find
# ii.
pairs(college[1:10]) # Doesn't help too much
# iii.
plot(Private, Outstate)
# iv
Elite = rep("No", nrow(college))      # Creates a "column vector" with char = "No" for each vector element.
Elite[Top10perc > 50] = "Yes"         # Now the rows associated to Top10perc > 50 change from a "No" class to a "Yes" class.
# These universities belong to a group that we call as Elite.
Elite = as.factor(Elite)
summary(Elite)                        # No = 699, Yes = 78
plot(Elite, Outstate)                 # "Yes" have a highly negative skewed distribution
# vi
# Define ratio_accept: measures how difficult is to be accepted in a determined college.
ratio_accept = Accept/Apps
plot(ratio_accept, Top10perc)    # There is an inverse relationship between these variables. The more the top students apply
# the more difficult to be accepted.
plot(Top10perc, Grad.Rate)
college[Grad.Rate>100]
college[Grad.Rate>100]
# 8 (b)
# The default way of calling a dataframe's column is dull so we simplify that task by using attach():
attach(college)
# 9
Auto = read.table("/home/fernando/github/an-introduction-to-statistical-learning-my-answers/chapter_2/Auto.data",
header = TRUE, stringsAsFactors = TRUE, na.strings = "?")        ##########NÃƒO SE ESQUECER DE TIRAR ESSE CAMINHO DEPOIS
Auto = na.omit(Auto)                  # Removes the rows that contain NA"
View(Auto)
attach(Auto)
# (b)
apply(Auto, 2, range) # x = Auto -> dataframe or matrix, MARGIN = 2 -> application is performed on columns, FUN = range -> applied function
# (c)
apply(Auto[, 1:6], 2, mean)     # 1:6 chooses the quantitative columns
apply(Auto[, 1:6], 2, sd)
# (d)
newAuto = Auto[-(10:85), ]         # Removes the 10th through 85th observations
apply(newAuto, 2, range)
apply(newAuto[, 1:6], 2, mean)
apply(Auto[, 1:6], 2, sd)
# (e)
# Let's create a scatterplot matrix by using pairs()
pairs(Auto[ , 1:7])       # 1:7 means from mpg to year
plot(weight, mpg)         # As we expected, fuel economy decreases as cars get more heavy. It looks like an inverse relationship
plot(horsepower, weight)  # Heavy cars need more power to do well (horsepower is a unit measurement of power).
plot(horsepower, mpg)     # My explanation to this plot is that this an indirect relationship:
plot(weight, acceleration)    # We can see a weak negative correlation. The correlation is not a strong one as the greater
plot(horsepower, acceleration) # This can also explain why acceleration and power have a negative correlation.
year_factor = as.factor(year) # Changing years from numeric to factor allows us to make boxplots when using plot
# I didn't change the column year from Auto because this would produce an error when we plotted
# pairs(Auto[ , 1:7])
plot(year_factor, mpg, xlab = "Year", ylab = "Fuel Economy (mpg)", col = "springgreen", varwidth = TRUE )
# We can also speculate that there is a trend of increasing car's fuel economy. But it is not safe to conclude this since
# 9
Auto = read.table("Auto.data", header = TRUE, stringsAsFactors = TRUE, na.strings = "?")
# 10 (a)
library(ISLR2)
View(Boston)
?Boston
# 506 and 13 columns
# 506 and 13 columns
# The 13 variables values of each of the 506 suburbs are displayed in a single row.
# Each column represents one of the 13 housing variables.
# (b)
# (b)
# We didn't use pairs() as the scatterplots that it produces are very small and thus it makes difficult to see the relationships.
# Instead, I plotted each pair of variables separately.
j = 1
while(i > j) {
plot(Boston[ , i], Boston[, j], xlab = colnames(Boston)[i], ylab = colnames(Boston)[j])
}
View(Boston)
# 10 (a)
library(ISLR2)
View(Boston)
?Boston
# 506 and 13 columns
# 506 and 13 columns
# The 13 variables values of each of the 506 suburbs are displayed in a single row.
# Each column represents one of the 13 housing variables.
# (b)
# (b)
# We didn't use pairs() as the scatterplots that it produces are very small and thus it makes difficult to see the relationships.
# Instead, I plotted each pair of variables separately.
j = 1
while(i > j) {
plot(Boston[ , i], Boston[, j], xlab = colnames(Boston)[i], ylab = colnames(Boston)[j])
}
# (b)
# We didn't use pairs() as the scatterplots that it produces are very small and thus it makes difficult to see the relationships.
# Instead, I plotted each pair of variables separately.
for(i in 1:13) {
j = 1
while(i > j) {
plot(Boston[ , i], Boston[, j], xlab = colnames(Boston)[i], ylab = colnames(Boston)[j])
}
}
# 10 (a)
library(ISLR2)
View(Boston)
?Boston
attach(Boston)
# (b)
# We didn't use pairs() as the scatterplots that it produces are very small and thus it makes difficult to see the relationships.
# Instead, I plotted each pair of variables separately.
for(i in 1:13) {
j = 1
while(i > j) {
plot(Boston[ , i], Boston[, j], xlab = colnames(Boston)[i], ylab = colnames(Boston)[j])
j = j + 1
}
}
# (c)
plot(age, crim)
# In general, the older the dwelling the higher the crime. Non-linear relationship.
plot(dis, crim)
# In general, the closer to a worker are, the higher the crime. Non-linear relationship.
plot(rad, crim)
# In general, the higher the accessibility to radial highways, the higher the crime. Non-linear relationship.
plot(tax, crim)
# (d) Here we find data that have value above Q3 + 1.5 IQR for each value considered.
boxplot(crim)
quantile(crim)
# So we consider as high crime rate what is above Q3 + 1.5 IQR = 3.677083 + 1.5*(3.677083 - 0.082045)
3.677083 + 1.5*(3.677083 - 0.082045)    # = 9.07
high_crime_rate = Boston[crim > 9.07, ]
dim(high_crime_rate)[1]       # Returns the number of rows = 66 ([2] would have returned the number of columns)
# Tax rates
boxplot(tax)      # no outliers
boxplot(ptratio)   # only outliers with a very low ptratio value
# (e)
dim(Boston[chas == 1, ])[1]     # 35 suburbs
# (f)
median(ptratio)     # 19.05
# (g)
min_mdev = Boston[medv == min(medv), ]    # The census tract are number 399 and 406
View(min_dev)
comparison = dget("analysis.R")
comparison_399 = comparison(min_mdev[1, ], Boston)     # min_dev[1, ] is the data of the census tract 399
